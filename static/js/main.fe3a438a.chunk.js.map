{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","rotation_period","orbital_period","population","react_default","a","createElement","className","CardList","data","map","user","i","src_components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","console","log","state","_this2","Promise","all","url","fetch","then","allplanets","json","concat","toConsumableArray","results","catch","err","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe3a438a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ name, rotation_period, orbital_period, population}) => {\r\n    \r\n    return (\r\n        \r\n        <div className='tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <div className='card-bg'>\r\n                <h2>{name}</h2>\r\n                <p>Rotation Period: {rotation_period}</p>\r\n                <p>Orbital Period: {orbital_period}</p>\r\n                <p>Population: {population}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ data }) => {\r\n    return (\r\n        <div>\r\n           {\r\n                data.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            name={data[i].name} \r\n                            rotation_period={data[i].rotation_period}\r\n                            orbital_period={data[i].orbital_period}\r\n                            population={data[i].population}\r\n\r\n                        />\r\n                        )\r\n                    })\r\n                }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa3 bg-lightest-grey\">\r\n            <input \r\n                type=\"search\" \r\n                placeholder=\"Planet Search\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{overflow: 'scroll', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n//import { robots } from './robots'; //uses internal json\nimport '../containers/App.css';\n\nclass App extends Component {\n    \n    constructor()     {\n        super()\n        this.state = {\n            //robots: robots, uses internal json\n            data: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        \n        const urls = [\n            'https://swapi.co/api/planets/?page=1',\n            'https://swapi.co/api/planets/?page=2',\n            'https://swapi.co/api/planets/?page=3'\n          ]\n          \n          Promise.all(urls.map(url =>\n              fetch(url).then(allplanets => allplanets.json())\n            ))\n            .then(allplanets => {\n                this.setState({ data: \n                [\n                    ...allplanets[0].results, \n                    ...allplanets[1].results,\n                    ...allplanets[2].results\n                ]\n                     })\n                console.log(allplanets)\n            })\n            .catch(err => console.log('ughhhh fix it!', err));\n        \n\n            \n\n            \n       \n\n\n        /* fetch('https://swapi.co/api/planets/')\n        .then(response=> {\n            return response.json();\n        })\n        .then(users => {\n            this.setState({ data: users.results})\n        }); */\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        console.log(event.target.value)\n    \n    }\n\n    render() {\n        const { data, searchfield } = this.state;\n        const filteredRobots = this.state.data.filter(data => {\n            return data.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        //check if there are no users show loading message\n        if(data.length === 0){\n            return <h1>Loading, please wait!</h1>\n        } else {\n        return (\n                <div className=\"tc\">\n                <h1 className=\"f1\">RoboFamily</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                <CardList data={filteredRobots}/>\n                </Scroll>\n                </div>\n            );\n        }\n        }\n    }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}